name: Build & Deploy NFT Pro

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  JAVA_VERSION: 17
  ANDROID_COMPILE_SDK: 34
  ANDROID_BUILD_TOOLS: 34.0.0

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run unit tests
        run: ./gradlew testDebugUnitTest

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports
          path: app/build/reports/tests/

  lint:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run Lint
        run: ./gradlew lintDebug

      - name: Run Detekt
        run: ./gradlew detekt

      - name: Upload lint reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lint-reports
          path: |
            app/build/reports/lint-results-debug.html
            app/build/reports/detekt/

  build-debug:
    name: 🔨 Build Debug APK
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.ref != 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Create google-services.json
        run: |
          echo '${{ secrets.GOOGLE_SERVICES_JSON }}' > app/google-services.json

      - name: Build Debug APK
        run: ./gradlew assembleDebug

      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: nft-pro-debug-apk
          path: app/build/outputs/apk/debug/*.apk

  build-release:
    name: 🎯 Build Release APK/AAB
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Create google-services.json
        run: |
          echo '${{ secrets.GOOGLE_SERVICES_JSON }}' > app/google-services.json

      - name: Create keystore
        run: |
          echo '${{ secrets.KEYSTORE }}' | base64 -d > app/keystore.jks

      - name: Create local.properties
        run: |
          echo "OPENSEA_API_KEY=${{ secrets.OPENSEA_API_KEY }}" >> local.properties
          echo "ALCHEMY_API_KEY=${{ secrets.ALCHEMY_API_KEY }}" >> local.properties
          echo "INFURA_PROJECT_ID=${{ secrets.INFURA_PROJECT_ID }}" >> local.properties
          echo "REVENUECAT_API_KEY=${{ secrets.REVENUECAT_API_KEY }}" >> local.properties

      - name: Build Release AAB
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          ./gradlew bundleRelease \
            -Pandroid.injected.signing.store.file=app/keystore.jks \
            -Pandroid.injected.signing.store.password=$KEYSTORE_PASSWORD \
            -Pandroid.injected.signing.key.alias=$KEY_ALIAS \
            -Pandroid.injected.signing.key.password=$KEY_PASSWORD

      - name: Build Release APK
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          ./gradlew assembleRelease \
            -Pandroid.injected.signing.store.file=app/keystore.jks \
            -Pandroid.injected.signing.store.password=$KEYSTORE_PASSWORD \
            -Pandroid.injected.signing.key.alias=$KEY_ALIAS \
            -Pandroid.injected.signing.key.password=$KEY_PASSWORD

      - name: Upload Release AAB
        uses: actions/upload-artifact@v4
        with:
          name: nft-pro-release-aab
          path: app/build/outputs/bundle/release/*.aab

      - name: Upload Release APK
        uses: actions/upload-artifact@v4
        with:
          name: nft-pro-release-apk
          path: app/build/outputs/apk/release/*.apk

      - name: Generate mapping file
        run: |
          find app/build/outputs/mapping/release -name "mapping.txt" -exec cp {} mapping.txt \;

      - name: Upload Mapping File
        uses: actions/upload-artifact@v4
        with:
          name: nft-pro-mapping
          path: mapping.txt

  deploy-internal:
    name: 📱 Deploy Internal Testing
    runs-on: ubuntu-latest
    needs: build-release
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download AAB
        uses: actions/download-artifact@v4
        with:
          name: nft-pro-release-aab
          path: .

      - name: Setup Google Play Service Account
        run: |
          echo '${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}' > service-account.json

      - name: Deploy to Internal Testing
        uses: r0adkll/upload-google-play@v1.1.3
        with:
          serviceAccountJson: service-account.json
          packageName: com.nftpro
          releaseFiles: "*.aab"
          track: internal
          status: completed
          whatsNewDirectory: fastlane/metadata/android/

  deploy-production:
    name: 🚀 Deploy Production
    runs-on: ubuntu-latest
    needs: build-release
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download AAB
        uses: actions/download-artifact@v4
        with:
          name: nft-pro-release-aab
          path: .

      - name: Download Mapping File
        uses: actions/download-artifact@v4
        with:
          name: nft-pro-mapping
          path: .

      - name: Setup Google Play Service Account
        run: |
          echo '${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}' > service-account.json

      - name: Deploy to Production (5% Rollout)
        uses: r0adkll/upload-google-play@v1.1.3
        with:
          serviceAccountJson: service-account.json
          packageName: com.nftpro
          releaseFiles: "*.aab"
          mappingFile: mapping.txt
          track: production
          status: inProgress
          userFraction: 0.05
          whatsNewDirectory: fastlane/metadata/android/

      - name: Upload to Firebase Crashlytics
        run: |
          echo "Uploading mapping file to Crashlytics..."
          # Firebase Crashlytics mapping upload would go here

  notify:
    name: 📢 Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-internal, deploy-production]
    if: always()
    steps:
      - name: Notify Slack on Success
        if: ${{ success() }}
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#nft-pro-releases'
          text: |
            ✅ *NFT Pro* successfully deployed!
            📱 Version: ${{ github.ref_name }}
            🔗 Branch: ${{ github.ref }}
            👤 By: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on Failure
        if: ${{ failure() }}
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#nft-pro-releases'
          text: |
            ❌ *NFT Pro* deployment failed!
            📱 Version: ${{ github.ref_name }}
            🔗 Branch: ${{ github.ref }}
            👤 By: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
