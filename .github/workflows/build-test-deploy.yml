name: 🚀 NFT Pro - Build, Test & Deploy

on:
  push:
    branches: [ main, develop, staging ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]

env:
  JAVA_VERSION: 17
  ANDROID_COMPILE_SDK: 34

jobs:
  # ============================================================================
  # TESTING PHASE
  # ============================================================================
  test:
    name: 🧪 Run Tests & Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: gradle-${{ runner.os }}-

      - name: Grant execute permission
        run: chmod +x gradlew

      - name: Run unit tests
        run: ./gradlew testDebugUnitTest --continue

      - name: Run lint analysis
        run: ./gradlew lintDebug --continue

      - name: Generate test report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Test Results
          path: '**/build/test-results/testDebugUnitTest/TEST-*.xml'
          reporter: java-junit

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports
          path: |
            app/build/reports/tests/
            app/build/reports/lint-results-debug.html

  # ============================================================================
  # BUILD APK FOR TESTING
  # ============================================================================
  build-test-apk:
    name: 🔨 Build Release APK for Testing
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: gradle-${{ runner.os }}-

      - name: Grant execute permission
        run: chmod +x gradlew

      - name: Create google-services.json (Testing)
        run: |
          echo '${{ secrets.GOOGLE_SERVICES_JSON_STAGING }}' > app/google-services.json

      - name: Create keystore for testing
        run: |
          echo '${{ secrets.RELEASE_KEYSTORE }}' | base64 -d > app/release-keystore.jks

      - name: Create local.properties (Testing APIs)
        run: |
          echo "OPENSEA_API_KEY=${{ secrets.OPENSEA_API_KEY_TEST }}" >> local.properties
          echo "ALCHEMY_API_KEY=${{ secrets.ALCHEMY_API_KEY_TEST }}" >> local.properties
          echo "INFURA_PROJECT_ID=${{ secrets.INFURA_PROJECT_ID_TEST }}" >> local.properties
          echo "REVENUECAT_API_KEY=${{ secrets.REVENUECAT_API_KEY_TEST }}" >> local.properties

      - name: Build Release APK for Testing
        env:
          RELEASE_KEYSTORE_PASSWORD: ${{ secrets.RELEASE_KEYSTORE_PASSWORD }}
          RELEASE_KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
          RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
        run: |
          ./gradlew assembleRelease \
            -Pandroid.injected.signing.store.file=app/release-keystore.jks \
            -Pandroid.injected.signing.store.password=$RELEASE_KEYSTORE_PASSWORD \
            -Pandroid.injected.signing.key.alias=$RELEASE_KEY_ALIAS \
            -Pandroid.injected.signing.key.password=$RELEASE_KEY_PASSWORD

      - name: Upload Testing Release APK
        uses: actions/upload-artifact@v4
        with:
          name: nft-pro-testing-release-apk-${{ github.run_number }}
          path: app/build/outputs/apk/release/*.apk
          retention-days: 30

      - name: Create QR Code for APK Download
        run: |
          APK_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "📱 **Test APK Ready!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Download: [NFT Pro Test APK]($APK_URL)" >> $GITHUB_STEP_SUMMARY
          echo "Build: \`${{ github.run_number }}\`" >> $GITHUB_STEP_SUMMARY
          echo "Branch: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY

  # ============================================================================
  # BUILD RELEASE AAB FOR PLAY STORE
  # ============================================================================
  build-release-aab:
    name: 🎯 Build Release AAB
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: gradle-${{ runner.os }}-

      - name: Grant execute permission
        run: chmod +x gradlew

      - name: Create google-services.json (Production)
        run: |
          echo '${{ secrets.GOOGLE_SERVICES_JSON_PROD }}' > app/google-services.json

      - name: Create keystore file
        run: |
          echo '${{ secrets.RELEASE_KEYSTORE }}' | base64 -d > app/release-keystore.jks

      - name: Create local.properties (Production)
        run: |
          echo "OPENSEA_API_KEY=${{ secrets.OPENSEA_API_KEY_PROD }}" >> local.properties
          echo "ALCHEMY_API_KEY=${{ secrets.ALCHEMY_API_KEY_PROD }}" >> local.properties
          echo "INFURA_PROJECT_ID=${{ secrets.INFURA_PROJECT_ID_PROD }}" >> local.properties
          echo "REVENUECAT_API_KEY=${{ secrets.REVENUECAT_API_KEY_PROD }}" >> local.properties

      - name: Build Release AAB
        env:
          RELEASE_KEYSTORE_PASSWORD: ${{ secrets.RELEASE_KEYSTORE_PASSWORD }}
          RELEASE_KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
          RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
        run: |
          ./gradlew bundleRelease \
            -Pandroid.injected.signing.store.file=app/release-keystore.jks \
            -Pandroid.injected.signing.store.password=$RELEASE_KEYSTORE_PASSWORD \
            -Pandroid.injected.signing.key.alias=$RELEASE_KEY_ALIAS \
            -Pandroid.injected.signing.key.password=$RELEASE_KEY_PASSWORD

      - name: Build Release APK (Backup)
        env:
          RELEASE_KEYSTORE_PASSWORD: ${{ secrets.RELEASE_KEYSTORE_PASSWORD }}
          RELEASE_KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
          RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
        run: |
          ./gradlew assembleRelease \
            -Pandroid.injected.signing.store.file=app/release-keystore.jks \
            -Pandroid.injected.signing.store.password=$RELEASE_KEYSTORE_PASSWORD \
            -Pandroid.injected.signing.key.alias=$RELEASE_KEY_ALIAS \
            -Pandroid.injected.signing.key.password=$RELEASE_KEY_PASSWORD

      - name: Upload Release AAB
        uses: actions/upload-artifact@v4
        with:
          name: nft-pro-release-aab-${{ github.run_number }}
          path: app/build/outputs/bundle/release/*.aab
          retention-days: 90

      - name: Upload Release APK
        uses: actions/upload-artifact@v4
        with:
          name: nft-pro-release-apk-${{ github.run_number }}
          path: app/build/outputs/apk/release/*.apk
          retention-days: 90

      - name: Extract and upload mapping file
        run: |
          find app/build/outputs/mapping/release -name "mapping.txt" -exec cp {} nft-pro-mapping-${{ github.run_number }}.txt \;
        
      - name: Upload ProGuard Mapping
        uses: actions/upload-artifact@v4
        with:
          name: nft-pro-mapping-${{ github.run_number }}
          path: nft-pro-mapping-${{ github.run_number }}.txt
          retention-days: 365

      - name: Generate build summary
        run: |
          echo "🚀 **Release Build Complete!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Files Generated:**" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Release AAB (for Play Store)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Release APK (for testing)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ ProGuard mapping file" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
          echo "1. 📱 Download APK for manual testing" >> $GITHUB_STEP_SUMMARY
          echo "2. ✅ Approve deployment to Play Store" >> $GITHUB_STEP_SUMMARY

  # ============================================================================
  # INTERNAL TESTING DEPLOYMENT (Manual Trigger Required)
  # ============================================================================
  deploy-internal:
    name: 📱 Deploy to Internal Testing
    runs-on: ubuntu-latest
    needs: build-release-aab
    if: github.ref == 'refs/heads/main'
    environment: internal-testing  # Requires manual approval
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Release AAB
        uses: actions/download-artifact@v4
        with:
          name: nft-pro-release-aab-${{ github.run_number }}
          path: .

      - name: Setup Google Play Service Account
        run: |
          echo '${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}' > google-play-service-account.json

      - name: Deploy to Internal Testing Track
        uses: r0adkll/upload-google-play@v1.1.3
        with:
          serviceAccountJson: google-play-service-account.json
          packageName: com.nftpro
          releaseFiles: "*.aab"
          track: internal
          status: completed
          changesNotSentForReview: true
          whatsNewDirectory: fastlane/metadata/android/

      - name: Post deployment comment
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🚀 **NFT Pro** deployed to **Internal Testing**!\n\n📱 Check Google Play Console for testing link.'
            })

  # ============================================================================
  # PRODUCTION DEPLOYMENT (Tag-based + Manual Approval)
  # ============================================================================
  deploy-production:
    name: 🏆 Deploy to Production (5% Rollout)
    runs-on: ubuntu-latest
    needs: build-release-aab
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production  # Requires manual approval
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Release AAB
        uses: actions/download-artifact@v4
        with:
          name: nft-pro-release-aab-${{ github.run_number }}
          path: .

      - name: Download Mapping File
        uses: actions/download-artifact@v4
        with:
          name: nft-pro-mapping-${{ github.run_number }}
          path: .

      - name: Setup Google Play Service Account
        run: |
          echo '${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}' > google-play-service-account.json

      - name: Deploy to Production (5% Staged Rollout)
        uses: r0adkll/upload-google-play@v1.1.3
        with:
          serviceAccountJson: google-play-service-account.json
          packageName: com.nftpro
          releaseFiles: "*.aab"
          mappingFile: "nft-pro-mapping-${{ github.run_number }}.txt"
          track: production
          status: inProgress
          userFraction: 0.05
          whatsNewDirectory: fastlane/metadata/android/

      - name: Upload symbols to Firebase Crashlytics
        run: |
          echo "Uploading mapping to Crashlytics..."
          # Firebase CLI command to upload symbols would go here

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: NFT Pro ${{ github.ref }}
          draft: false
          prerelease: false
          body: |
            ## 🚀 NFT Pro Release ${{ github.ref }}
            
            ### ✨ What's New
            - Enhanced multi-chain support
            - Improved tax calculations
            - Performance optimizations
            - Bug fixes and stability improvements
            
            ### 📱 Deployment
            - ✅ Deployed to Google Play Store (5% rollout)
            - 🔒 ProGuard mapping uploaded to Crashlytics
            - 📊 Analytics and crash reporting enabled

  # ============================================================================
  # NOTIFICATIONS
  # ============================================================================
  notify:
    name: 📢 Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-internal, deploy-production]
    if: always()
    steps:
      - name: Notify success
        if: success()
        run: |
          echo "✅ NFT Pro successfully deployed!"
          
      - name: Notify failure  
        if: failure()
        run: |
          echo "❌ NFT Pro deployment failed!"