name: 🔨 NFT Pro - Build APK & AAB Only

on:
  push:
    branches: [ main, develop, staging ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allows manual trigger

env:
  JAVA_VERSION: 17
  ANDROID_COMPILE_SDK: 34

jobs:
  # ============================================================================
  # TESTING & QUALITY CHECKS
  # ============================================================================
  test:
    name: 🧪 Tests & Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: gradle-${{ runner.os }}-

      - name: Grant execute permission
        run: chmod +x gradlew

      - name: Run Tests
        run: ./gradlew testDebugUnitTest --continue

      - name: Run Lint
        run: ./gradlew lintDebug --continue

      - name: Upload Test Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports-${{ github.run_number }}
          path: |
            app/build/reports/tests/
            app/build/reports/lint-results-debug.html
          retention-days: 7

  # ============================================================================
  # BUILD RELEASE APK FOR TESTING
  # ============================================================================
  build-testing-apk:
    name: 📱 Build Release APK (for Testing)
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: gradle-${{ runner.os }}-

      - name: Grant execute permission
        run: chmod +x gradlew

      - name: Create google-services.json (Production for Real Data)
        run: |
          echo '${{ secrets.GOOGLE_SERVICES_JSON_PROD }}' > app/google-services.json

      - name: Create keystore
        run: |
          echo '${{ secrets.RELEASE_KEYSTORE }}' | base64 -d > app/release-keystore.jks

      - name: Create local.properties (PRODUCTION APIs for Real Testing)
        run: |
          echo "OPENSEA_API_KEY=${{ secrets.OPENSEA_API_KEY_PROD }}" >> local.properties
          echo "ALCHEMY_API_KEY=${{ secrets.ALCHEMY_API_KEY_PROD }}" >> local.properties
          echo "INFURA_PROJECT_ID=${{ secrets.INFURA_PROJECT_ID_PROD }}" >> local.properties
          echo "REVENUECAT_API_KEY=${{ secrets.REVENUECAT_API_KEY_TEST }}" >> local.properties

      - name: Build Signed Release APK
        env:
          RELEASE_KEYSTORE_PASSWORD: ${{ secrets.RELEASE_KEYSTORE_PASSWORD }}
          RELEASE_KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
          RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
        run: |
          ./gradlew assembleRelease \
            -Pandroid.injected.signing.store.file=app/release-keystore.jks \
            -Pandroid.injected.signing.store.password=$RELEASE_KEYSTORE_PASSWORD \
            -Pandroid.injected.signing.key.alias=$RELEASE_KEY_ALIAS \
            -Pandroid.injected.signing.key.password=$RELEASE_KEY_PASSWORD

      - name: Upload Testing APK
        uses: actions/upload-artifact@v4
        with:
          name: 📱-nft-pro-testing-apk-${{ github.run_number }}
          path: app/build/outputs/apk/release/*.apk
          retention-days: 30

      - name: Create Download Summary
        run: |
          echo "📱 **Release APK for Testing Ready!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**File:** NFT Pro Release APK" >> $GITHUB_STEP_SUMMARY
          echo "**Build:** #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** PRODUCTION APIs (real data for testing)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**📥 How to Download:**" >> $GITHUB_STEP_SUMMARY
          echo "1. Go to Actions tab" >> $GITHUB_STEP_SUMMARY
          echo "2. Click on this workflow run" >> $GITHUB_STEP_SUMMARY
          echo "3. Download \`📱-nft-pro-testing-apk-${{ github.run_number }}\`" >> $GITHUB_STEP_SUMMARY
          echo "4. Install APK on your device" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**✅ Note:** RELEASE build with PRODUCTION APIs - test with your real NFTs!" >> $GITHUB_STEP_SUMMARY

  # ============================================================================
  # BUILD PRODUCTION AAB + APK
  # ============================================================================
  build-production:
    name: 🚀 Build Production AAB & APK
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: gradle-${{ runner.os }}-

      - name: Grant execute permission
        run: chmod +x gradlew

      - name: Create google-services.json (Production)
        run: |
          echo '${{ secrets.GOOGLE_SERVICES_JSON_PROD }}' > app/google-services.json

      - name: Create keystore
        run: |
          echo '${{ secrets.RELEASE_KEYSTORE }}' | base64 -d > app/release-keystore.jks

      - name: Create local.properties (Production Environment)
        run: |
          echo "OPENSEA_API_KEY=${{ secrets.OPENSEA_API_KEY_PROD }}" >> local.properties
          echo "ALCHEMY_API_KEY=${{ secrets.ALCHEMY_API_KEY_PROD }}" >> local.properties
          echo "INFURA_PROJECT_ID=${{ secrets.INFURA_PROJECT_ID_PROD }}" >> local.properties
          echo "REVENUECAT_API_KEY=${{ secrets.REVENUECAT_API_KEY_PROD }}" >> local.properties

      - name: Build Signed Production AAB
        env:
          RELEASE_KEYSTORE_PASSWORD: ${{ secrets.RELEASE_KEYSTORE_PASSWORD }}
          RELEASE_KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
          RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
        run: |
          ./gradlew bundleRelease \
            -Pandroid.injected.signing.store.file=app/release-keystore.jks \
            -Pandroid.injected.signing.store.password=$RELEASE_KEYSTORE_PASSWORD \
            -Pandroid.injected.signing.key.alias=$RELEASE_KEY_ALIAS \
            -Pandroid.injected.signing.key.password=$RELEASE_KEY_PASSWORD

      - name: Build Signed Production APK
        env:
          RELEASE_KEYSTORE_PASSWORD: ${{ secrets.RELEASE_KEYSTORE_PASSWORD }}
          RELEASE_KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
          RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
        run: |
          ./gradlew assembleRelease \
            -Pandroid.injected.signing.store.file=app/release-keystore.jks \
            -Pandroid.injected.signing.store.password=$RELEASE_KEYSTORE_PASSWORD \
            -Pandroid.injected.signing.key.alias=$RELEASE_KEY_ALIAS \
            -Pandroid.injected.signing.key.password=$RELEASE_KEY_PASSWORD

      - name: Upload Production AAB (for Play Store)
        uses: actions/upload-artifact@v4
        with:
          name: 🏪-nft-pro-production-aab-${{ github.run_number }}
          path: app/build/outputs/bundle/release/*.aab
          retention-days: 90

      - name: Upload Production APK (for manual testing)
        uses: actions/upload-artifact@v4
        with:
          name: 📱-nft-pro-production-apk-${{ github.run_number }}
          path: app/build/outputs/apk/release/*.apk
          retention-days: 90

      - name: Generate ProGuard Mapping
        run: |
          find app/build/outputs/mapping/release -name "mapping.txt" -exec cp {} nft-pro-mapping.txt \;

      - name: Upload ProGuard Mapping
        uses: actions/upload-artifact@v4
        with:
          name: 📋-nft-pro-mapping-${{ github.run_number }}
          path: nft-pro-mapping.txt
          retention-days: 365

      - name: Create Production Build Summary
        run: |
          echo "🚀 **Production Build Complete!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Generated Files:**" >> $GITHUB_STEP_SUMMARY
          echo "- 🏪 **AAB file** (for Google Play Store upload)" >> $GITHUB_STEP_SUMMARY
          echo "- 📱 **APK file** (for manual testing before store upload)" >> $GITHUB_STEP_SUMMARY  
          echo "- 📋 **ProGuard mapping** (for crash analysis)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Build Info:**" >> $GITHUB_STEP_SUMMARY
          echo "- Build Number: #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Environment: Production (live APIs)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**📋 Manual Deployment Steps:**" >> $GITHUB_STEP_SUMMARY
          echo "1. ⬇️ Download production APK for final testing" >> $GITHUB_STEP_SUMMARY
          echo "2. 🧪 Test APK thoroughly on real devices" >> $GITHUB_STEP_SUMMARY
          echo "3. ⬇️ Download AAB file when ready" >> $GITHUB_STEP_SUMMARY
          echo "4. 🏪 Upload AAB to Google Play Console manually" >> $GITHUB_STEP_SUMMARY
          echo "5. 📋 Upload mapping.txt to Play Console for crash reports" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**⚠️ Important:** NO automatic deployment configured" >> $GITHUB_STEP_SUMMARY

  # ============================================================================
  # CREATE GITHUB RELEASE (for tags only)
  # ============================================================================
  create-release:
    name: 📦 Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-production]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Production APK
        uses: actions/download-artifact@v4
        with:
          name: 📱-nft-pro-production-apk-${{ github.run_number }}
          path: ./apk

      - name: Download Production AAB
        uses: actions/download-artifact@v4
        with:
          name: 🏪-nft-pro-production-aab-${{ github.run_number }}
          path: ./aab

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: NFT Pro ${{ github.ref_name }}
          draft: false
          prerelease: false
          body: |
            ## 🚀 NFT Pro Release ${{ github.ref_name }}
            
            ### ✨ What's New in This Release
            - Multi-chain NFT tracking (Ethereum, Polygon, Solana, BSC)
            - Advanced tax calculation with FIFO/LIFO/HIFO methods
            - Real-time portfolio valuation
            - Enhanced security with biometric authentication
            - Performance improvements and bug fixes
            
            ### 📱 Installation Files
            Download the appropriate file for your needs:
            
            **For Testing:** Use the APK file to test on your device
            **For Play Store:** Use the AAB file to upload to Google Play Console
            
            ### 🔧 Technical Details
            - **Min SDK:** Android 7.0 (API 24)
            - **Target SDK:** Android 14 (API 34)  
            - **Architecture:** ARM64, ARMv7, x86_64
            - **Size:** ~15MB (compressed)
            
            ### 🛡️ Security
            - All releases are signed with production certificate
            - ProGuard obfuscation enabled
            - Database encryption with SQLCipher
            
            ---
            
            **⚠️ Manual Deployment Required**
            This release does NOT automatically deploy to Play Store. 
            You need to manually upload the AAB file after testing.

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./apk/*.apk
          asset_name: nft-pro-${{ github.ref_name }}.apk
          asset_content_type: application/vnd.android.package-archive